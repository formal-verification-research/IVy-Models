#lang ivy1.7

type zoneIdentifiers = {a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,x}
type dir = {nm,n1,em,e1,sm,s1,wm,w1,new}
type linkStatuses = {free,faulty,edge}#,default}
type number
interpret number -> bv[5]

var destNE : bool

object flit = {
  
  var sent4 : dir
  var sent3 : dir
  var sent2 : dir
  var sent1 : dir
  var sent0 : dir
  
  var zn4 : zoneIdentifiers
  var zn3 : zoneIdentifiers
  var zn2 : zoneIdentifiers
  var zn1 : zoneIdentifiers
  var zn0 : zoneIdentifiers
  
  var livelock_free : bool
  
  after init {
    # sent8 := new;
    # sent7 := new;
    # sent6 := new;
    # sent5 := new;
    sent4 := new;
    sent3 := new;
    sent2 := new;
    sent1 := new;    
    sent0 := new;    
    
    # zn8 := x;
    # zn7 := x;
    # zn6 := x;
    # zn5 := x;
    zn4 := x;
    zn3 := x;
    zn2 := x;
    zn1 := x;  
    
    zn0 := *;
    assume zn0 ~= x;
    
    destNE := *;
    
    livelock_free := false;
  }
  
  action moveFlit = {

    sent4 := sent3;
    sent3 := sent2;
    sent2 := sent1;
    sent1 := sent0;

    zn4 := zn3;
    zn3 := zn2;
    zn2 := zn1;
    zn1 := zn0;
    
    node.northLink1 := node.northLink;
    node.eastLink1  := node.eastLink;
    node.southLink1 := node.southLink;
    node.westLink1  := node.westLink;
    node.northLink2 := node.northLink1;
    node.eastLink2  := node.eastLink1;
    node.southLink2 := node.southLink1;
    node.westLink2  := node.westLink1;
    node.northLink3 := node.northLink2;
    node.eastLink3  := node.eastLink2;
    node.southLink3 := node.southLink2;
    node.westLink3  := node.westLink2;
    node.northLink4 := node.northLink3;
    node.eastLink4  := node.eastLink3;
    node.southLink4 := node.southLink3;
    node.westLink4  := node.westLink3;
    
    if (~livelock_free) {
      call router.route;
    }
    
  } #end moveFlit
  
  export moveFlit

} #end flit



object router = {

  var negTrav : bool
  
  var abcjklnoq : bool
  var afghijklmnpq : bool
  var abcfhijknop : bool
  var cdefghijmopq : bool
  var acefghijklnoq : bool
  var efghm : bool
  var ghijklmnpq : bool
  var abcdefnop : bool
  var cjoqdip : bool
  var fghijmpq : bool
  
  var westNew : bool
  var notWest : bool
  var notSouth : bool
  var notEast : bool
  var notNorth : bool
  
  action setConditions = {
    negTrav := (flit.sent1 = w1 | flit.sent1 = wm | flit.sent1 = s1 | flit.sent1 = sm | flit.sent1 = new);
    westNew := (flit.sent1 = w1 | flit.sent1 = wm | flit.sent1 = new);
    notWest := (flit.sent1 = n1 | flit.sent1 = nm | flit.sent1 = s1 | flit.sent1 = sm | flit.sent1 = e1 | flit.sent1 = em | flit.sent1 = new);
    notSouth := (flit.sent1 = n1 | flit.sent1 = nm | flit.sent1 = w1 | flit.sent1 = wm | flit.sent1 = e1 | flit.sent1 = em | flit.sent1 = new);
    notEast := (flit.sent1 = n1 | flit.sent1 = nm | flit.sent1 = w1 | flit.sent1 = wm | flit.sent1 = s1 | flit.sent1 = sm | flit.sent1 = new);
    notNorth := (flit.sent1 = e1 | flit.sent1 = em | flit.sent1 = w1 | flit.sent1 = wm | flit.sent1 = s1 | flit.sent1 = sm | flit.sent1 = new);
        
    abcjklnoq := (flit.zn1 = a | flit.zn1 = b | flit.zn1 = c | flit.zn1 = j | flit.zn1 = k | flit.zn1 = l | flit.zn1 = n | flit.zn1 = o | flit.zn1 = q);
    afghijklmnpq := (flit.zn1 = a | flit.zn1 = f | flit.zn1 = g | flit.zn1 = h | flit.zn1 = i | flit.zn1 = j | flit.zn1 = k | flit.zn1 = l | flit.zn1 = m | flit.zn1 = n | flit.zn1 = p | flit.zn1 = q);
    abcfhijknop := (flit.zn1 = a | flit.zn1 = b | flit.zn1 = c | flit.zn1 = f | flit.zn1 = h | flit.zn1 = i | flit.zn1 = j | flit.zn1 = k | flit.zn1 = n | flit.zn1 = o | flit.zn1 = p);
    cdefghijmopq := (flit.zn1 = c | flit.zn1 = d | flit.zn1 = e | flit.zn1 = f | flit.zn1 = g | flit.zn1 = h | flit.zn1 = i | flit.zn1 = j | flit.zn1 = m | flit.zn1 = o | flit.zn1 = p | flit.zn1 = q);
    acefghijklnoq := (flit.zn1 = a | flit.zn1 = c | flit.zn1 = e | flit.zn1 = f | flit.zn1 = g | flit.zn1 = h | flit.zn1 = i | flit.zn1 = j | flit.zn1 = k | flit.zn1 = l | flit.zn1 = n | flit.zn1 = o | flit.zn1 = q);
    efghm := (flit.zn1 = e | flit.zn1 = f | flit.zn1 = g | flit.zn1 = h | flit.zn1 = m);
    ghijklmnpq := (flit.zn1 = g | flit.zn1 = h | flit.zn1 = i | flit.zn1 = j | flit.zn1 = k | flit.zn1 = l | flit.zn1 = m | flit.zn1 = n | flit.zn1 = p | flit.zn1 = q);
    abcdefnop := (flit.zn1 = a | flit.zn1 = b | flit.zn1 = c | flit.zn1 = d | flit.zn1 = e | flit.zn1 = f | flit.zn1 = n | flit.zn1 = o | flit.zn1 = p);
    cjoqdip := (flit.zn1 = c | flit.zn1 = j | flit.zn1 = o | flit.zn1 = q | flit.zn1 = d | flit.zn1 = i | flit.zn1 = p);
    fghijmpq := (flit.zn1 = f | flit.zn1 = g | flit.zn1 = h | flit.zn1 = i | flit.zn1 = j | flit.zn1 = m | flit.zn1 = p | flit.zn1 = q);
    
    
  } #end setZoneConditions

  action route = {
    
    call setConditions;
    call node.getLinks;
    
    ### ------------
    
    if flit.zn1 = r {
      flit.livelock_free := true;
    }
    
    ### ------------
    
    else if node.westLink = free & flit.zn1 = n {
      flit.sent0 := w1;
    }
    else if node.southLink = free & flit.zn1 = o {
      flit.sent0 := s1;
    }
    else if node.eastLink = free & flit.zn1 = p {
      flit.sent0 := e1;
    }
    else if node.northLink = free & flit.zn1 = q {
      flit.sent0 := n1;
    }
    
    ### ------------
    
    else if node.westLink = free & negTrav & (abcjklnoq | (afghijklmnpq & node.southLink = faulty)) { # & (abcfhijknop | westNew) {
      flit.sent0 := w1;
    }
    else if node.southLink = free & negTrav & (afghijklmnpq | (cdefghijmopq & node.westLink = faulty)) { # & acefghijklnoq {
      flit.sent0 := s1;
    }
    else if node.eastLink = free & notWest & efghm {
      flit.sent0 := e1;
    }
    else if node.northLink = free & notSouth & ghijklmnpq {
      flit.sent0 := n1;
    }
    
    ### ------------
    
    else if node.westLink = free & (notEast | flit.zn1 = q) {
      flit.sent0 := w1;
    }
    else if node.southLink = free & notNorth & abcdefnop { # & (notEast | ~destNE) {
      flit.sent0 := s1;
    }
    else if node.eastLink = free & cdefghijmopq & (notWest | cjoqdip) {
      flit.sent0 := e1;
    }
    else if node.northLink = free & afghijklmnpq & (notSouth | fghijmpq) {
      flit.sent0 := n1;
    }
    
    ### ------------
    
    else {
      flit.livelock_free := true; #just for now, to remove from consideration
    };
    
    call node.getNextZone;
    
  }

} #end router



object node = {
  
  var northLink : linkStatuses
  var eastLink  : linkStatuses
  var southLink : linkStatuses
  var westLink  : linkStatuses
  
  var northLink1 : linkStatuses
  var eastLink1  : linkStatuses
  var southLink1 : linkStatuses
  var westLink1  : linkStatuses
  var northLink2 : linkStatuses
  var eastLink2  : linkStatuses
  var southLink2 : linkStatuses
  var westLink2  : linkStatuses
  var northLink3 : linkStatuses
  var eastLink3  : linkStatuses
  var southLink3 : linkStatuses
  var westLink3  : linkStatuses
  var northLink4 : linkStatuses
  var eastLink4  : linkStatuses
  var southLink4 : linkStatuses
  var westLink4  : linkStatuses
  
  individual faultCounter : number
  
  after init {
    call getLinks;
    # northLink := *;
    # eastLink := *;
    # southLink := *;
    # westLink := *;
  }
  
  action getLinks = { #eventually change this
    
    # if (northLink = default) {
    # northLink := *;
    # assume northLink ~= default;
    # };
    # if (eastLink = default) {
    # eastLink := *;
    # assume eastLink ~= default;
    # };
    # if (southLink = default) {
    # southLink := *;
    # assume southLink ~= default;
    # };
    # if (westLink = default) {
    # westLink := *;
    # assume westLink ~= default;
    # };
    
    if (flit.sent2 = n1 & flit.sent1 = s1) | (flit.sent2 = s1 & flit.sent1 = n1) | (flit.sent2 = e1 & flit.sent1 = w1) | (flit.sent2 = w1 & flit.sent1 = e1) {
      northLink := northLink1;
      eastLink := eastLink1;
      southLink := southLink1;
      southLink := southLink1;
    }
    else if (flit.sent4 = n1 & flit.sent3 = e1 & flit.sent2 = s1 & flit.sent1 = w1) | 
       (flit.sent4 = e1 & flit.sent3 = s1 & flit.sent2 = w1 & flit.sent1 = n1) |
       (flit.sent4 = s1 & flit.sent3 = w1 & flit.sent2 = n1 & flit.sent1 = e1) | 
       (flit.sent4 = w1 & flit.sent3 = n1 & flit.sent2 = e1 & flit.sent1 = s1) | 
       (flit.sent4 = s1 & flit.sent3 = e1 & flit.sent2 = n1 & flit.sent1 = w1) | 
       (flit.sent4 = e1 & flit.sent3 = n1 & flit.sent2 = w1 & flit.sent1 = s1) |
       (flit.sent4 = n1 & flit.sent3 = w1 & flit.sent2 = s1 & flit.sent1 = e1) | 
       (flit.sent4 = w1 & flit.sent3 = s1 & flit.sent2 = e1 & flit.sent1 = n1) {
      northLink := northLink4;
      eastLink := eastLink4;
      southLink := southLink4;
      southLink := southLink4;
    }
    else if flit.sent1 = n1 | flit.sent1 = nm | flit.sent1 = s1 | flit.sent1 = sm {
      northLink := *;
      southLink := *;
      if eastLink ~= edge { eastLink := *; };
      if westLink ~= edge { westLink := *; };
    }
    else if flit.sent1 = e1 | flit.sent1 = em | flit.sent1 = w1 | flit.sent1 = wm {
      eastLink := *;
      westLink := *;
      if northLink ~= edge { northLink := *; };
      if southLink ~= edge { southLink := *; };
    }
    else {
      northLink := *;
      eastLink  := *;
      southLink := *;
      westLink := *;
    };
    
    if ~router.abcdefnop {
      assume ~(northLink = edge);
    };
    if ~router.abcjklnoq {
      assume ~(eastLink = edge);
    };
    if ~router.afghijklmnpq {
      assume ~(southLink = edge);
    };
    if ~router.cdefghijmopq {
      assume ~(westLink = edge);
    };
    
    if flit.sent1 = n1 | flit.sent1 = nm {
      assume ~(southLink = edge);
    };
    if flit.sent1 = e1 | flit.sent1 = em {
      assume ~(westLink = edge);
    };
    if flit.sent1 = s1 | flit.sent1 = sm {
      assume ~(northLink = edge);
    };
    if flit.sent1 = w1 | flit.sent1 = wm {
      assume ~(eastLink = edge);
    };

    assume ~(northLink = edge & southLink = edge) & ~(eastLink = edge & westLink = edge);
    # assume northLink ~= default & eastLink ~= default & southLink ~= default & westLink ~= default;
    
    faultCounter := 0;
    
    if northLink  = faulty { faultCounter := faultCounter + 1 };
    if northLink1 = faulty { faultCounter := faultCounter + 1 };
    if northLink2 = faulty { faultCounter := faultCounter + 1 };
    if northLink3 = faulty { faultCounter := faultCounter + 1 };
    if northLink4 = faulty { faultCounter := faultCounter + 1 };
    
    if eastLink  = faulty { faultCounter := faultCounter + 1 };
    if eastLink1 = faulty { faultCounter := faultCounter + 1 };
    if eastLink2 = faulty { faultCounter := faultCounter + 1 };
    if eastLink3 = faulty { faultCounter := faultCounter + 1 };
    if eastLink4 = faulty { faultCounter := faultCounter + 1 };
    
    if southLink  = faulty { faultCounter := faultCounter + 1 };
    if southLink1 = faulty { faultCounter := faultCounter + 1 };
    if southLink2 = faulty { faultCounter := faultCounter + 1 };
    if southLink3 = faulty { faultCounter := faultCounter + 1 };
    if southLink4 = faulty { faultCounter := faultCounter + 1 };

    if westLink  = faulty { faultCounter := faultCounter + 1 };    
    if westLink1 = faulty { faultCounter := faultCounter + 1 };
    if westLink2 = faulty { faultCounter := faultCounter + 1 };
    if westLink3 = faulty { faultCounter := faultCounter + 1 };
    if westLink4 = faulty { faultCounter := faultCounter + 1 };
    
    #This is how we can set fault tolerance specification
    assume faultCounter <= 2;
    
  } #end getLinks
  
  action getNextZone = { #this if statement will need MUCH more development... this is just good enough to test.
    if flit.zn1 = a {
      if flit.sent0 = n1 | flit.sent0 = nm {
        flit.zn0 := b;
      }
      else if flit.sent0 = e1 | flit.sent0 = em {
        flit.zn0 := a;
      }
      else if flit.sent0 = s1 | flit.sent0 = sm {
        flit.zn0 := l;
      }
      # else if flit.sent0 = w1 {
        # if flit.sent1 = wm {
          # flit.zn0 := n;
        # }
        # else {
          # flit.zn0 := *;
          # assume flit.zn0 = a | flit.zn0 = n;
        # }
      # }
      # else if flit.sent0 = wm {
        # flit.zn0 := a;
      # }
      else if flit.sent0 = w1 | flit.sent0 = wm {
        if flit.zn2 = n {
          flit.zn0 := n;
        }
        else {
          flit.zn0 := *;
          assume flit.zn0 = a | flit.zn0 = n;
        }
      }
      
    }
    else if flit.zn1 = b {
      if flit.sent0 = n1 | flit.sent0 = nm {
        flit.zn0 := b;
      }
      else if flit.sent0 = e1 | flit.sent0 = em {
        flit.zn0 := b;
      }
      # else if flit.sent0 = s1 {
        # if flit.sent1 = sm {
          # flit.zn0 := *;
          # assume flit.zn0 = a | flit.zn0 = n;
        # }
        # else {
          # flit.zn0 := *;
          # assume flit.zn0 = b | flit.zn0 = a | flit.zn0 = n;
        # }
      # }
      # else if flit.sent0 = sm {
        # flit.zn0 := b;
      # }
      # else if flit.sent0 = w1 {
        # if flit.sent1 = wm {
          # flit.zn0 := *;
          # assume flit.zn0 = c | flit.zn0 = o;
        # }
        # else {
          # flit.zn0 := *;
          # assume flit.zn0 = b | flit.zn0 = c | flit.zn0 = o;
        # }
      # }
      else if flit.sent0 = s1 | flit.sent0 = sm {
        if flit.zn2 = n | flit.zn2 = o {
          flit.zn0 := n;
        }
        else {
          flit.zn0 := *;
          assume flit.zn0 = b | flit.zn0 = a | flit.zn0 = n;
        }
      }
      else if flit.sent0 = w1 | flit.sent0 = wm {
        if flit.zn2 = n | flit.zn2 = o {
          flit.zn0 := o;
        }
        else {
          flit.zn0 := *;
          assume flit.zn0 = b | flit.zn0 = c | flit.zn0 = o;
        }
      }
      # else if flit.sent0 = wm {
        # flit.zn0 := b;
      # }
    
    }
    else if flit.zn1 = c {
      if flit.sent0 = n1 | flit.sent0 = nm {
        flit.zn0 := c;
      }
      else if flit.sent0 = e1 | flit.sent0 = em {
        flit.zn0 := b;
      }
      else if flit.sent0 = s1 | flit.sent0 = sm {
        if flit.zn2 = o {
          flit.zn0 := o;
        }
        else {
          flit.zn0 := *;
          assume flit.zn0 = c | flit.zn0 = o;
        }
      }
      else if flit.sent0 = w1 | flit.sent0 = wm {
        flit.zn0 := d;
      }
    
    }
    else if flit.zn1 = d {
      if flit.sent0 = n1 | flit.sent0 = nm {
        flit.zn0 := d;
      }
      else if flit.sent0 = e1 | flit.sent0 = em {
        if flit.zn2 = c {
          flit.zn0 := c;
        }
        else if flit.zn2 = o {
          flit.zn0 := o;
        }
        else {
          flit.zn0 := *;
          assume flit.zn0 = c | flit.zn0 = o;
        }
      }
      else if flit.sent0 = s1 | flit.sent0 = sm {
        if flit.zn2 = o | flit.zn2 = p {
          flit.zn0 := p;
        }
        else if flit.zn2 = c {
          flit.zn0 := d;
        }
        else {
          flit.zn0 := *;
          assume flit.zn0 = d | flit.zn0 = p;
        }
      }
      else if flit.sent0 = w1 | flit.sent0 = wm {
        flit.zn0 := e;
      }
    
    }
    else if flit.zn1 = e {
      if flit.sent0 = n1 | flit.sent0 = nm {
        flit.zn0 := e;
      }
      else if flit.sent0 = e1 | flit.sent0 = em {
        if flit.zn2 = d {
          flit.zn0 := d;
        }
        else {
          flit.zn0 := *;
          assume flit.zn0 = e | flit.zn0 = d;
        }
      }
      else if flit.sent0 = s1 | flit.sent0 = sm {
        if flit.zn2 = f {
          flit.zn0 := f;
        }
        else {
          flit.zn0 := *;
          assume flit.zn0 = e | flit.zn0 = f;
        }
      }
      else if flit.sent0 = w1 | flit.sent0 = wm {
        flit.zn0 := e;
      }
    
    }
    else if flit.zn1 = f {
      if flit.sent0 = n1 | flit.sent0 = nm {
        flit.zn0 := e;
      }
      else if flit.sent0 = e1 | flit.sent0 = em {
        if flit.zn2 = p | flit.zn3 = m | flit.zn3 = d | flit.zn4 = i {
          flit.zn0 := p
        }
        else {
          flit.zn0 := *;
          assume flit.zn0 = f | flit.zn0 = p;
        }
      }
      else if flit.sent0 = s1 | flit.sent0 = sm {
        flit.zn0 := g;
      }
      else if flit.sent0 = w1 | flit.sent0 = wm {
        flit.zn0 := f;
      }
    
    }
    else if flit.zn1 = g {
      if flit.sent0 = n1 | flit.sent0 = nm {
        flit.zn0 := f;
      }
      else if flit.sent0 = e1 | flit.sent0 = em {
        if flit.zn2 = m | flit.zn3 = p | flit.zn3 = i {
          flit.zn0 := m;
        }
        else {
          flit.zn0 := *;
          assume flit.zn0 = g | flit.zn0 = m;
        }
      }
      else if flit.sent0 = s1 | flit.sent0 = sm {
        flit.zn0 := h;
      }
      else if flit.sent0 = w1 | flit.sent0 = wm {
        flit.zn0 := g;
      }
    
    }
    else if flit.zn1 = h {
      if flit.sent0 = n1 | flit.sent0 = nm {
        if flit.zn2 = g {
          flit.zn0 := g;
        }
        else {
          flit.zn0 := *;
          assume flit.zn0 = g | flit.zn0 = h;
        }
      }
      else if flit.sent0 = e1 | flit.sent0 = em {
        if flit.zn2 = i {
          flit.zn0 := i;
        }
        else {
          flit.zn0 := *;
          assume flit.zn0 = h | flit.zn0 = i;
        }
      }
      else if flit.sent0 = s1 | flit.sent0 = sm {
        flit.zn0 := h;
      }
      else if flit.sent0 = w1 | flit.sent0 = wm {
        flit.zn0 := h;
      }
    
    }
    else if flit.zn1 = i {
      if flit.sent0 = n1 | flit.sent0 = nm {
        if flit.zn2 = m {
          flit.zn0 := m;
        }
        else {
          flit.zn0 := *;
          assume flit.zn0 = i | flit.zn0 = m;
        }
      }
      else if flit.sent0 = e1 | flit.sent0 = em {
        flit.zn0 := j;
      }
      else if flit.sent0 = s1 | flit.sent0 = sm {
        flit.zn0 := i;
      }
      else if flit.sent0 = w1 | flit.sent0 = wm {
        flit.zn0 := h;
      }
    
    }
    else if flit.zn1 = j {
      if flit.sent0 = n1 | flit.sent0 = nm {
        if flit.zn2 = q {
          flit.zn0 := q;
        }
        else {
          flit.zn0 := *;
          assume flit.zn0 = j | flit.zn0 = q;
        }
      }
      else if flit.sent0 = e1 | flit.sent0 = em {
        flit.zn0 := k;
      }
      else if flit.sent0 = s1 | flit.sent0 = sm {
        flit.zn0 := j;
      }
      else if flit.sent0 = w1 | flit.sent0 = wm {
        flit.zn0 := i;
      }
    
    }
    else if flit.zn1 = k {
      if flit.sent0 = n1 | flit.sent0 = nm {
        if flit.zn2 = l {
          flit.zn0 := l;
        }
        else {
          flit.zn0 := *;
          assume flit.zn0 = k | flit.zn0 = l;
        }
      }
      else if flit.sent0 = e1 | flit.sent0 = em {
        flit.zn0 := k;
      }
      else if flit.sent0 = s1 | flit.sent0 = sm {
        flit.zn0 := k;
      }
      else if flit.sent0 = w1 | flit.sent0 = wm {
        if flit.zn2 = j {
          flit.zn0 := j;
        }
        else {
          flit.zn0 := *;
          assume flit.zn0 = j | flit.zn0 = k;
        }
      }
    
    }
    else if flit.zn1 = l {
      if flit.sent0 = n1 | flit.sent0 = nm {
        if flit.zn2 = a {
          flit.zn0 := a;
        }
        else if flit.zn2 = n {
          flit.zn0 := n;
        }
        else {
          flit.zn0 := *;
          assume flit.zn0 = a | flit.zn0 = n;
        }
      }
      else if flit.sent0 = e1 | flit.sent0 = em {
        flit.zn0 := l;
      }
      else if flit.sent0 = s1 | flit.sent0 = sm {
        flit.zn0 := k;
      }
      else if flit.sent0 = w1 | flit.sent0 = wm {
        if flit.zn2 = q {
          flit.zn0 := q;
        }
        else {
          flit.zn0 := *;
          assume flit.zn0 = l | flit.zn0 = q;
        }
      }
    
    }
    else if flit.zn1 = m {
      if flit.sent0 = n1 | flit.sent0 = nm {
        flit.zn0 := p;
      }
      else if flit.sent0 = e1 | flit.sent0 = em {
        flit.zn0 := q;
      }
      else if flit.sent0 = s1 | flit.sent0 = sm {
        flit.zn0 := i;
      }
      else if flit.sent0 = w1 | flit.sent0 = wm {
        flit.zn0 := g;
      }
    
    }
    else if flit.zn1 = n {
      if flit.sent0 = n1 | flit.sent0 = nm {
        flit.zn0 := b;
      }
      else if flit.sent0 = e1 | flit.sent0 = em {
        flit.zn0 := a;
      }
      else if flit.sent0 = s1 | flit.sent0 = sm {
        flit.zn0 := l;
      }
      else if flit.sent0 = w1 | flit.sent0 = wm {
        flit.zn0 := r;
      }
    
    }
    else if flit.zn1 = o {
      if flit.sent0 = n1 | flit.sent0 = nm {
        flit.zn0 := c;
      }
      else if flit.sent0 = e1 | flit.sent0 = em {
        flit.zn0 := b;
      }
      else if flit.sent0 = s1 | flit.sent0 = sm {
        flit.zn0 := r;
      }
      else if flit.sent0 = w1 | flit.sent0 = wm {
        flit.zn0 := d;
      }
    
    }
    else if flit.zn1 = p {
      if flit.sent0 = n1 | flit.sent0 = nm {
        flit.zn0 := d;
      }
      else if flit.sent0 = e1 | flit.sent0 = em {
        flit.zn0 := r;
      }
      else if flit.sent0 = s1 | flit.sent0 = sm {
        flit.zn0 := m;
      }
      else if flit.sent0 = w1 | flit.sent0 = wm {
        flit.zn0 := f;
      }
    
    }
    else if flit.zn1 = q {
      if flit.sent0 = n1 | flit.sent0 = nm {
        flit.zn0 := r;
      }
      else if flit.sent0 = e1 | flit.sent0 = em {
        flit.zn0 := l;
      }
      else if flit.sent0 = s1 | flit.sent0 = sm {
        flit.zn0 := j;
      }
      else if flit.sent0 = w1 | flit.sent0 = wm {
        flit.zn0 := m;
      }
    
    }
    
  } #end getNextZone


} #end node


invariant ~(flit.sent4 = n1 & flit.sent3 = e1 & flit.sent2 = s1 & flit.sent1 = w1 & flit.sent0 = n1)
invariant ~(flit.sent4 = e1 & flit.sent3 = s1 & flit.sent2 = w1 & flit.sent1 = n1 & flit.sent0 = e1)
invariant ~(flit.sent4 = s1 & flit.sent3 = w1 & flit.sent2 = n1 & flit.sent1 = e1 & flit.sent0 = s1)
invariant ~(flit.sent4 = w1 & flit.sent3 = n1 & flit.sent2 = e1 & flit.sent1 = s1 & flit.sent0 = w1)

invariant ~(flit.sent4 = w1 & flit.sent3 = s1 & flit.sent2 = e1 & flit.sent1 = n1 & flit.sent0 = w1)
invariant ~(flit.sent4 = s1 & flit.sent3 = e1 & flit.sent2 = n1 & flit.sent1 = w1 & flit.sent0 = s1)
invariant ~(flit.sent4 = e1 & flit.sent3 = n1 & flit.sent2 = w1 & flit.sent1 = s1 & flit.sent0 = e1)
invariant ~(flit.sent4 = n1 & flit.sent3 = w1 & flit.sent2 = s1 & flit.sent1 = e1 & flit.sent0 = n1)


invariant ~(flit.sent4 = w1 & flit.sent3 = e1 & flit.sent2 = w1 & flit.sent1 = e1 & flit.sent0 = w1)
invariant ~(flit.sent4 = e1 & flit.sent3 = w1 & flit.sent2 = e1 & flit.sent1 = w1 & flit.sent0 = e1)

invariant ~(flit.sent4 = n1 & flit.sent3 = s1 & flit.sent2 = n1 & flit.sent1 = s1 & flit.sent0 = n1)
invariant ~(flit.sent4 = s1 & flit.sent3 = n1 & flit.sent2 = s1 & flit.sent1 = n1 & flit.sent0 = s1)

attribute method = mc