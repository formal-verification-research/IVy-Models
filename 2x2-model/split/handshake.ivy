#lang ivy1.7

type sources = {void,r14,r25,r36} #represent 1 or 4, 2 or 5, 3 or 6

object spec = { #cont: copy_data
	
	action copy_data = {
		a.r4.has_flit := d.r_recv.has_flit;
		b.r4.has_flit := d.r_recv.has_flit;
		c.r4.has_flit := d.r_recv.has_flit;
		d.r1.has_flit := a.r_recv.has_flit;
		e.r1.has_flit := a.r_recv.has_flit;
		f.r1.has_flit := a.r_recv.has_flit;
		
		a.r5.has_flit := e.r_recv.has_flit;
		b.r5.has_flit := e.r_recv.has_flit;
		c.r5.has_flit := e.r_recv.has_flit;
		d.r2.has_flit := b.r_recv.has_flit;
		e.r2.has_flit := b.r_recv.has_flit;
		f.r2.has_flit := b.r_recv.has_flit;
		
		a.r6.has_flit := f.r_recv.has_flit;
		b.r6.has_flit := f.r_recv.has_flit;
		c.r6.has_flit := f.r_recv.has_flit;
		d.r3.has_flit := c.r_recv.has_flit;
		e.r3.has_flit := c.r_recv.has_flit;
		f.r3.has_flit := c.r_recv.has_flit;
		
	} #copy_data
	
		

} #end spec

module top_row = {

	module r_send = {
		
		individual has_flit : bool 
		
		after init {
			has_flit := true; 
			assert has_flit; 
		}
		
		before send {
			require has_flit;
		}
		
		action send = {
			assert has_flit;
			call arbiter.check;
		}
		
		action sent = {
			has_flit := false;
		}
		
		after sent {
			assert ~has_flit;
		}
		
	} #end r_send 
	
	instance r4 : r_send
	instance r5 : r_send
	instance r6 : r_send
	
	object arbiter = {
		
		individual boolean_rand : bool 
		individual get_from : sources 
		individual ready : bool
		
		after init {
			boolean_rand := *;
			get_from := void;
			ready := false;
		}
		
		before choose {
			get_from := void;
			ready := false;
		}
		
		action choose = {
			if r4.has_flit {
				if r5.has_flit {
					if r6.has_flit { 
						get_from := *; 
						assume get_from ~= void; 
						# ready := true;
					}
					else { 
						if boolean_rand {
							get_from := r14;
							# ready := true;
						}
						else {
							get_from := r25;
							# ready := true;
						};
		            };
				}
				else if r6.has_flit { #if just r4 and r6 have flits
					if boolean_rand {
						get_from := r14;
						# ready := true;
						}
					else {
						get_from := r36;
						# ready := true;
					};
				}
				else { #if only r4 has a flit
					get_from := r14;
					# ready := true;
		        };
	            ready := true;
			}	
			else if r5.has_flit {
				if r6.has_flit { #if r5 and r6 have flits
					if boolean_rand {
						get_from := r25;
						# ready := true;
					}
					else {
						get_from := r36;
						# ready := true;
					};
				}
				else { #if only r5 has a flit
					get_from := r25;
					# ready := true;
		        };
                ready := true;
			}
			else if r6.has_flit { #if only r6 has a flit
				get_from := r36;
				ready := true;
			}
			else { #make sure at least one of the options is selected.
				get_from := void;
				ready := false;
			};
		}
		
		action check = {
			require ready;
			if ~r_recv.has_flit { 
				assert ~r_recv.has_flit; 
				assert r4.has_flit | r5.has_flit | r6.has_flit;
				call send; 
			};
		} 
		
		execute choose before check
		
		action send = {
			if get_from = r14 {
				call r4.sent;
				call r_recv.get_flit;
			};
			if get_from = r25 {
				call r5.sent;
				call r_recv.get_flit;
			};
			if get_from = r36 {
				call r6.sent;
				call r_recv.get_flit;
			};
			call spec.copy_data;
		}
				
	} #end arbiter
	
	object r_recv = {
		
		individual has_flit : bool #whether or not there is a flit here
		
		after init {
			has_flit := false; #start without a flit
			assert ~has_flit; #make sure it knows there is no flit
		}
		
		before get_flit {
			require ~has_flit; #make sure there is no flit here before getting one
		}
		
		action get_flit = {
			has_flit := true; #get the flit
		}
		
		after get_flit {
			assert has_flit; #make sure it got the flit
		}
				
	} #end r_recv

	export r4.send
	export r5.send
	export r6.send
	
	invariant ~(arbiter.ready & arbiter.get_from = void)
	invariant (arbiter.ready & (r4.has_flit | r5.has_flit | r6.has_flit)) -> (arbiter.get_from ~= void)

	
} #end top_row

instance a : top_row
instance b : top_row
instance c : top_row

module bottom_row = {

	module r_send = {
		
		individual has_flit : bool 
		
		after init {
			has_flit := true; 
			assert has_flit; 
		}
		
		before send {
			require has_flit;
		}
		
		action send = {
			assert has_flit;
			call arbiter.check;
		}
		
		action sent = {
			has_flit := false;
		}
		
		after sent {
			assert ~has_flit;
		}
		
	} #end r_send 
	
	instance r1 : r_send
	instance r2 : r_send
	instance r3 : r_send
	
	object arbiter = {
		
		individual boolean_rand : bool 
		individual get_from : sources 
		individual ready : bool
		
		after init {
			boolean_rand := *;
			get_from := void;
			ready := false;
		}
		
		before choose {
			get_from := void;
			ready := false;
		}
		
		action choose = {
			if r1.has_flit {
				if r2.has_flit {
					if r3.has_flit { 
						get_from := *; 
						assume get_from ~= void; 
						# ready := true;
					}
					else { 
						if boolean_rand {
							get_from := r14;
							# ready := true;
						}
						else {
							get_from := r25;
							# ready := true;
						};
		            };
				}
				else if r3.has_flit { #if just r4 and r6 have flits
					if boolean_rand {
						get_from := r14;
						# ready := true;
						}
					else {
						get_from := r36;
						# ready := true;
					};
				}
				else { #if only r4 has a flit
					get_from := r14;
					# ready := true;
		        };
	            ready := true;
			}	
			else if r2.has_flit {
				if r3.has_flit { #if r5 and r6 have flits
					if boolean_rand {
						get_from := r25;
						# ready := true;
					}
					else {
						get_from := r36;
						# ready := true;
					};
				}
				else { #if only r5 has a flit
					get_from := r25;
					# ready := true;
		        };
                ready := true;
			}
			else if r3.has_flit { #if only r6 has a flit
				get_from := r36;
				ready := true;
			}
			else { #make sure at least one of the options is selected.
				get_from := void;
				ready := false;
			};
		}
		
		action check = {
			require ready;
			if ~r_recv.has_flit { #only move on if the downstream router is available
				assert ~r_recv.has_flit; #make sure the downstream router is available
				assert r1.has_flit | r2.has_flit | r3.has_flit; #make sure the upstream router has the flit
				call send; #call the downstream router to get the flit
			};
			
		} 
		
		execute choose before check
		
		action send = {
			if get_from = r14 {
				call r1.sent;
				call r_recv.get_flit;
			};
			if get_from = r25 {
				call r2.sent;
				call r_recv.get_flit;
			};
			if get_from = r36 {
				call r3.sent;
				call r_recv.get_flit;
			};
			call spec.copy_data;
		}
		
	} #end arbiter
	
	object r_recv = {
		
		individual has_flit : bool #whether or not there is a flit here
		
		after init {
			has_flit := false; #start without a flit
			assert ~has_flit; #make sure it knows there is no flit
		}
		
		before get_flit {
			require ~has_flit; #make sure there is no flit here before getting one
		}
		
		action get_flit = {
			has_flit := true; #get the flit
		}
		
		after get_flit {
			assert has_flit; #make sure it got the flit
		}
				
	} #end r_recv

	export r1.send
	export r2.send
	export r3.send
	
	invariant ~(arbiter.ready & arbiter.get_from = void)
	invariant (arbiter.ready & (r1.has_flit | r2.has_flit | r3.has_flit)) -> (arbiter.get_from ~= void)
	
} #end bottom_row

instance d : bottom_row
instance e : bottom_row
instance f : bottom_row

