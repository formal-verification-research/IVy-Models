
Isolate this:

    The following properties are assumed as axioms:
        pseudocode_count.ivy: spec.axiom3
        pseudocode_count.ivy: spec.axiom4

    The inductive invariant consists of the following conjectures:
        pseudocode_count.ivy: line 264: flit.conj8
        pseudocode_count.ivy: line 267: flit.conj9
        pseudocode_count.ivy: line 339: node.conj11(X:coord, Y:coord)
        pseudocode_count.ivy: line 349: invar12
        pseudocode_count.ivy: line 350: invar13

    The following action implementations are present:
        pseudocode_count.ivy: line 241: implementation of flit.get_distances
        pseudocode_count.ivy: line 229: implementation of flit.send
        pseudocode_count.ivy: line 284: implementation of node.init[after10]
        pseudocode_count.ivy: line 288: implementation of node.route
        pseudocode_count.ivy: line 101: implementation of spec.check
        pseudocode_count.ivy: line 166: implementation of spec.go_east
        pseudocode_count.ivy: line 173: implementation of spec.go_north
        pseudocode_count.ivy: line 159: implementation of spec.go_south
        pseudocode_count.ivy: line 152: implementation of spec.go_west
        pseudocode_count.ivy: line 184: implementation of spec.incr
        pseudocode_count.ivy: line 180: implementation of spec.is_delivered
        pseudocode_count.ivy: line 143: implementation of spec.one_hop
        pseudocode_count.ivy: line 125: implementation of spec.second_check

    The following action monitors are present:
        pseudocode_count.ivy: line 233: monitor of flit.send
        pseudocode_count.ivy: line 90: monitor of spec.second_check
        pseudocode_count.ivy: line 90: monitor of spec.check

    The following initializers are present:
        pseudocode_count.ivy: line 207: flit.init[after6]
        pseudocode_count.ivy: line 31: spec.init[after5]

    Initialization must establish the invariant
        pseudocode_count.ivy: line 264: flit.conj8 ... PASS
        pseudocode_count.ivy: line 267: flit.conj9 ... PASS
        pseudocode_count.ivy: line 339: node.conj11(X:coord, Y:coord) ... PASS
        pseudocode_count.ivy: line 349: invar12 ... PASS
        pseudocode_count.ivy: line 350: invar13 ... PASS

    Any assertions in initializers must be checked ... PASS

    The following set of external actions must preserve the invariant:
        (internal) ext:flit.send
            pseudocode_count.ivy: line 264: flit.conj8 ... PASS
            pseudocode_count.ivy: line 267: flit.conj9 ... PASS
            pseudocode_count.ivy: line 339: node.conj11(X:coord, Y:coord) ... PASS
            pseudocode_count.ivy: line 349: invar12 ... PASS
            pseudocode_count.ivy: line 350: invar13 ... PASS
        (internal) ext:node.init[after10]
            pseudocode_count.ivy: line 264: flit.conj8 ... PASS
            pseudocode_count.ivy: line 267: flit.conj9 ... PASS
            pseudocode_count.ivy: line 339: node.conj11(X:coord, Y:coord) ... PASS
            pseudocode_count.ivy: line 349: invar12 ... PASS
            pseudocode_count.ivy: line 350: invar13 ... PASS

    The following program assertions are treated as guarantees:
        in action spec.one_hop when called from node.route:
            pseudocode_count.ivy: line 144: guarantee ... PASS
        in action spec.second_check when called from node.route:
            pseudocode_count.ivy: line 95: guarantee ... FAIL
searching for a small model... done

Trace follows...
********************************************************************************
    3:moves = 3
    node.this_node_y(0,0) = 0
    node.this_node_y(0,1) = 1
    node.this_node_y(0,2) = 2
    node.this_node_y(1,0) = 0
    node.this_node_y(1,1) = 1
    node.this_node_y(1,2) = 2
    node.this_node_y(2,0) = 0
    node.this_node_y(2,1) = 1
    node.this_node_y(2,2) = 2
    flit.dest_x = 0
    node.south_free(0,0) = false
    node.south_free(0,1) = false
    node.south_free(0,2) = false
    node.south_free(1,0) = false
    node.south_free(1,1) = false
    node.south_free(1,2) = false
    node.south_free(2,0) = false
    node.south_free(2,1) = false
    node.south_free(2,2) = false
    spec.length = 3
    9:moves = 9
    1:coord = 1
    node.east_free(0,0) = false
    node.east_free(0,1) = false
    node.east_free(0,2) = false
    node.east_free(1,0) = false
    node.east_free(1,1) = false
    node.east_free(1,2) = false
    node.east_free(2,0) = false
    node.east_free(2,1) = false
    node.east_free(2,2) = false
    1:moves + 0 = 1
    3:moves + 0 = 3
    0:moves + 1 = 1
    0:moves + 3 = 3
    0:moves + 0 = 0
    0:moves + 9 = 9
    9:moves + 0 = 9
    spec.max_moves = 9
    node.west_free(0,0) = false
    node.west_free(0,1) = false
    node.west_free(0,2) = false
    node.west_free(1,0) = false
    node.west_free(1,1) = false
    node.west_free(1,2) = false
    node.west_free(2,0) = false
    node.west_free(2,1) = false
    node.west_free(2,2) = false
    0:coord - 0 = 0
    0:coord - 2 = 2
    1:coord - 0 = 1
    1:coord - 1 = 0
    2:coord - 0 = 2
    2:coord - 1 = 1
    2:coord - 2 = 0
    1:moves < 3 = true
    1:moves < 9 = true
    3:moves < 9 = true
    0:moves < 1 = true
    0:moves < 3 = true
    0:moves < 9 = true
    1:moves < 1 = false
    1:moves < 0 = false
    3:moves < 1 = false
    3:moves < 3 = false
    3:moves < 0 = false
    0:moves < 0 = false
    9:moves < 1 = false
    9:moves < 3 = false
    9:moves < 0 = false
    9:moves < 9 = false
    flit.dest_y = 1
    node.north_free(0,0) = false
    node.north_free(0,1) = false
    node.north_free(0,2) = false
    node.north_free(1,0) = false
    node.north_free(1,1) = false
    node.north_free(1,2) = false
    node.north_free(2,0) = false
    node.north_free(2,1) = false
    node.north_free(2,2) = false
    0:coord + 0 = 0
    0:coord + 1 = 1
    0:coord + 2 = 2
    1:coord + 0 = 1
    1:coord + 1 = 2
    2:coord + 0 = 2
    2:coord + 2 = 0
    node.this_node_x(0,0) = 0
    node.this_node_x(0,1) = 0
    node.this_node_x(0,2) = 0
    node.this_node_x(1,0) = 1
    node.this_node_x(1,1) = 1
    node.this_node_x(1,2) = 1
    node.this_node_x(2,0) = 2
    node.this_node_x(2,1) = 2
    node.this_node_x(2,2) = 2
    1:moves = 1
    0:coord = 0
    flit.y_distance = 0
    flit.x_distance = 2
    spec.east_ok = false
    node.has_flit(1,0) = true
    node.has_flit(0,0) = false
    node.has_flit(0,1) = false
    node.has_flit(0,2) = false
    node.has_flit(1,1) = false
    node.has_flit(1,2) = false
    node.has_flit(2,0) = false
    node.has_flit(2,1) = false
    node.has_flit(2,2) = false
    flit.current_y = 0
    spec.moves_made = 9
    flit.delivered = false
    flit.traveling = south
    spec.south_ok = false
    flit.current_x = 1
    spec.west_ok = false
    spec.north_ok = false
pseudocode_count.ivy: line 230: call node.route(flit.current_x, flit.current_y)
    prm:Y = 0
    prm:X = 1
pseudocode_count.ivy: line 291: call spec.check
pseudocode_count.ivy: line 91: spec.north_ok := false
pseudocode_count.ivy: line 92: spec.east_ok := false
pseudocode_count.ivy: line 93: spec.south_ok := false
pseudocode_count.ivy: line 94: spec.west_ok := false
pseudocode_count.ivy: line 95: assert spec.moves_made < spec.max_moves
