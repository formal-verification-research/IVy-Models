#lang ivy1.7

type packet
type id_number
var test : packet

object spec = {
	
	after init {
		test := 0;
		rar_1.r_send_A.has_flit := true; #initialize with flits in ABC and not in XYZ (can be changed)
		rar_1.r_send_B.has_flit := true;
		rar_1.r_send_C.has_flit := true;
		rar_2.r_send_A.has_flit := false;
		rar_2.r_send_B.has_flit := false;
		rar_2.r_send_C.has_flit := false;
	}
	
	function id(X:packet) : id_number          # map each node to an id
    axiom [injectivity] id(X) = id(Y) -> X = Y
	
} #end spec




###############################################################################################
# RARs A, B, & C ##############################################################################

module rar_1 = {
	
	module r_send = {
		
		individual has_flit : bool
		
		action send = {
			require has_flit;
			
		}
		
	} #end r_send 
	
	instance r_send_A : r_send
	instance r_send_B : r_send
	instance r_send_C : r_send
	
	object arbiter = {
		
	} #end arbiter
	
	object r_recv = {
		
	} #end arbiter
	
} #end r_a_r

instance r_a_r_A : rar_1
instance r_a_r_B : rar_1
instance r_a_r_C : rar_1





###############################################################################################
# RARs X, Y, & Z ##############################################################################

module rar_2 = {
	
	module r_send = {
		
		individual has_flit : bool
		
		action send = {
			
		}
		
	} #end r_send 
	
	instance r_send_A : r_send
	instance r_send_B : r_send
	instance r_send_C : r_send
	
	object arbiter = {
		
	} #end arbiter
	
	object r_recv = {
		
	} #end arbiter
	
} #end r_a_r

instance r_a_r_X : rar_2
instance r_a_r_Y : rar_2
instance r_a_r_Z : rar_2


