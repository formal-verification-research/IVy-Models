#lang ivy1.7

type zones = {a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r}
type directions = {wait,north,east,south,west,drop}
type status = {ok,faulty,busy,edge}

var zone : zones
var trav : directions

var northLink : status
var eastLink : status
var southLink : status
var westLink : status
var destNE : bool

var routed : directions

object spec = {
  
  after init {
    routed := wait;
    zone := *;
    trav := *;
    # we can assume that this node type can only possibly exist in certain zones
    # this is checked with an invariant at the bottom of the file as well.
    assume (zone = a | zone = b | zone = c | zone = d | zone = e | zone = f | zone = n | zone = o | zone = p | zone = r);
    assume trav ~= drop & trav ~= wait;
    
    # comment out the appropriate lines below:
    
    northLink := edge;
    # eastLink  := edge;
    # southLink := edge;
    # westLink  := edge;
    
    # northLink := *; assume northLink ~= edge;
    eastLink  := *; assume eastLink  ~= edge;
    southLink := *; assume southLink ~= edge;
    westLink  := *; assume westLink  ~= edge; 
    
  }
  
} #end spec


object node = {

  action route = {
  
  
    # if delivered
    if (zone = r) {
      routed := wait; # If it reached its destination, there is no routing decision, and thus no deadlock
    }

    # if one hop away and link is free
    else if (zone = n & westLink ~= faulty & westLink ~= edge) & ~(trav = north & westLink = busy) {
      routed := west;
    }
    else if (zone = o & southLink ~= faulty & southLink ~= edge) & ~(trav = east & southLink = busy) {
      routed := south;
    }
    else if (zone = p & eastLink ~= faulty & eastLink ~= edge) {
      routed := east;
    }
    else if (zone = q & northLink ~= faulty & northLink ~= edge) {
      routed := north;
    }

    # first set of options
    
    # Go west if... 
    else if ( 
      westLink ~= faulty & westLink ~= edge & ( trav = west | trav = south ) &
      ((zone = a | zone = b | zone = c | zone = j | zone = k | zone = l | zone = n | zone = o | zone = q) | ((zone = a | zone = f | zone = g | zone = h | zone = i | zone = j | zone = k | zone = l | zone = m | zone = n | zone = p | zone = q) & southLink = faulty)) &
      (trav ~= south | ~(zone = g | zone = m | zone = q | zone = l)) & ~(trav = north & westLink = busy)
    ) { routed := west; }

    # Go south if...
    else if ( 
      southLink ~= faulty & southLink ~= edge & ( trav = west | trav = south ) &
      ((zone = a | zone = b | zone = c | zone = d | zone = e | zone = f | zone = n | zone = o | zone = p) | ((zone = c | zone = d | zone = e | zone = f | zone = g | zone = h | zone = i | zone = j | zone = m | zone = o | zone = p | zone = q) & westLink = faulty)) &
      (~(zone = d | zone = p | zone = m | zone = i) | (zone = a | zone = b | zone = c | zone = d | zone = e | zone = f | zone = n | zone = o | zone = p)) & ~(trav = east & southLink = busy)
    ) { routed := south; }

    # Go east if...
    else if ( 
      eastLink ~= faulty & eastLink ~= edge & ( trav ~= west ) & ((zone = e | zone = f | zone = g | zone = h) | (zone = m)) 
    ) { routed := east; }

    # Go north if...
    else if ( 
      northLink ~= faulty & northLink ~= edge & ( trav ~= south ) &
      (zone = b | zone = c | zone = d | zone = e | zone = o) 
    ) { routed := north; }

    # ELSE

    # Go west if...
    else if ( 
      westLink ~= faulty & westLink ~= edge & 
      (zone = a | zone = b | zone = c | zone = j | zone = k | zone = l | zone = o | zone = n | zone = q) & 
      (zone = q | trav ~= east) & ~(trav = north & westLink = busy)
    ) { routed := west; }

    # Go south if...
    else if ( 
      southLink ~= faulty & southLink ~= edge & trav ~= north & 
      (zone = a | zone = b | zone = c | zone = d | zone = e | zone = f | zone = n | zone = o | zone = p) & 
      (trav ~= east | ~destNE) & ~(trav = east & southLink = busy)
    ) { routed := south; }

    # Go east if...
    else if ( 
      eastLink ~= faulty & eastLink ~= edge & 
      (zone = c | zone = d | zone = e | zone = f | zone = g | zone = h | zone = i | zone = j | zone = m | zone = o | zone = p | zone = q) & 
      (trav ~= west | (zone = a | zone = f | zone = n | zone = p) | (zone = d | zone = p | zone = i) ) 
    ) { routed := east; }

    # Go north if...
    else if ( 
      northLink ~= faulty & northLink ~= edge & 
      (zone = a | zone = f | zone = g | zone = h | zone = i | zone = j | zone = k | zone = l | zone = m | zone = n | zone = p | zone = q) & 
      (trav ~= south | (zone = c | zone = d | zone = e | zone = f | zone = g | zone = h | zone = i | zone = j | zone = m | zone = o | zone = p | zone = q) ) 
    ) { routed := north; }

    else {
      routed := drop;
    }
  
  } #end route
  
  export route

} #end node


invariant zone = a | zone = b | zone = c | zone = d | zone = e | zone = f | zone = n | zone = o | zone = p | zone = r
invariant trav ~= drop & trav ~= wait
invariant ~(routed = west  & trav = north & westLink  = busy)
invariant ~(routed = south & trav = east  & southLink = busy)
